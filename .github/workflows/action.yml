name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

      - name: Create JAR file
        run: ./gradlew bootJar

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: board-application
          path: build/libs/*.jar

      - name: Build info
        run: |
          echo "Build completed successfully!"
          echo "JAR files created:"
          ls -la build/libs/

  # 리눅스 서버 배포
  deploy-linux-server:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Download JAR artifacts
        uses: actions/download-artifact@v4
        with:
          name: board-application
          path: ./artifacts

      - name: Create deployment directory and copy files
        run: |
          mkdir -p deploy
          echo "Checking artifacts directory:"
          ls -la ./artifacts/
          echo "Finding JAR files:"
          find ./artifacts -name "*.jar" -type f
          echo "Copying JAR file:"
          JAR_FILE=$(find ./artifacts -name "*.jar" -type f | head -1)
          if [ -n "$JAR_FILE" ]; then
            cp "$JAR_FILE" deploy/app.jar
            echo "JAR file copied successfully"
          else
            echo "No JAR file found in artifacts directory"
            exit 1
          fi
          echo "Checking for DeployServer.sh:"
          if [ -f "DeployServer.sh" ]; then
            ls -la DeployServer.sh
          else
            echo "DeployServer.sh not found in current directory"
          fi
          echo "Copying DeployServer.sh:"
          if [ -f "DeployServer.sh" ]; then
            cp DeployServer.sh deploy/
            chmod +x deploy/DeployServer.sh
            echo "DeployServer.sh copied successfully"
          else
            echo "DeployServer.sh not found, creating a simple one"
            echo '#!/bin/bash' > deploy/DeployServer.sh
            echo 'echo "Starting Spring Boot application..."' >> deploy/DeployServer.sh
            echo 'nohup java -jar app.jar > app.log 2>&1 &' >> deploy/DeployServer.sh
            echo 'echo $! > app.pid' >> deploy/DeployServer.sh
            echo 'echo "Application started with PID: $(cat app.pid)"' >> deploy/DeployServer.sh
            chmod +x deploy/DeployServer.sh
            echo "Created DeployServer.sh"
          fi
          echo "Deploy directory contents:"
          ls -la deploy/

      - name: Create deployment package
        run: |
          cd deploy
          tar -czf ../deployment.tar.gz .

      - name: Deploy to Linux Server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: 211.209.1.229
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 2000
          source: "deployment.tar.gz"
          target: "/home/${{ secrets.SERVER_USER }}/"
          strip_components: 0

      - name: Extract and Deploy on Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 211.209.1.229
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 2000
          script: |
            # 배포 디렉토리 생성
            mkdir -p ~/board-app
            cd ~/board-app
            
            # 기존 애플리케이션 종료
            if [ -f app.pid ]; then
              PID=$(cat app.pid)
              if ps -p $PID > /dev/null 2>&1; then
                echo "Stopping existing application (PID: $PID)..."
                kill $PID
                sleep 3
                if ps -p $PID > /dev/null 2>&1; then
                  kill -9 $PID
                fi
              fi
              rm -f app.pid
            fi
            
            # 배포 파일 압축 해제
            cd ~
            tar -xzf deployment.tar.gz -C ~/board-app/
            rm deployment.tar.gz
            
            # 실행 권한 부여
            chmod +x ~/board-app/DeployServer.sh
            
            # 애플리케이션 실행
            cd ~/board-app
            ./DeployServer.sh

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 211.209.1.229
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 2000
          script: |
            echo "Checking application status..."
            sleep 10
            
            # 프로세스 확인
            if ps aux | grep -v grep | grep "java.*app.jar" > /dev/null; then
              echo " Application is running"
              
              # 포트 확인
              if netstat -tlnp 2>/dev/null | grep :8080 > /dev/null; then
                echo " Port 8080 is listening"
              else
                echo " Port 8080 is not listening"
              fi
              
              # 로그 확인
              echo "Recent logs:"
              tail -n 10 ~/board-app/app.log || echo "No log file found"
              
            else
              echo " Application is not running"
              echo "Checking logs for errors:"
              tail -n 20 ~/board-app/app.log || echo "No log file found"
              exit 1
            fi




